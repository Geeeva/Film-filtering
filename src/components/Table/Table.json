import React, {Component} from 'react';
import './Table.css';
import TableRow from './TableRow/TableRow';

class Table extends Component {
    constructor(props) {
        super(props)
        this.state = {
            filteredData: this.props.data,
            searchFieldInput: '',
            radioSearch: this.props.radioSearch,
            selectBoxOption: 1,
            transformed: false
        }
    }

    updatedSearch = (event) => {
        this.setState({
            searchFieldInput: event.target.value
        })
    }

    searchHandler = (event) => {
        this.setState({
            radioSearch: event.target.value
        })
    };

    selectBoxHandler = (event) => {
        this.setState({selectBoxOption: event.target.value});
    }

    submitHandler = (event) => {

        event.preventDefault();

        /*Check if the "title" radio option & select box option is selected*/

        if(this.state.radioSearch === "title" && this.state.selectBoxOption > 1) {
            let filteredData = this.props.data.filter(column => {
                return column.title.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        }); 
            this.setState({
                filteredData: filteredData
            });

        }   else if(this.state.radioSearch === "title" && this.state.selectBoxOption > 2) {
            let filteredData = this.props.data.filter(column => {
                return column.title.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            });
            
            }   else if(this.state.radioSearch === "title" && this.state.selectBoxOption > 3) {
            let filteredData = this.props.data.filter(column => {
                return column.title.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            });   

            }   else if(this.state.radioSearch === "title" && this.state.selectBoxOption > 4) {
            let filteredData = this.props.data.filter(column => {
                return column.title.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            }); 

        }   else if(this.state.radioSearch === "title" && this.state.selectBoxOption > 5) {
            let filteredData = this.props.data.filter(column => {
                return column.title.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            }); 

        }   else if(this.state.radioSearch === "title" && this.state.selectBoxOption > 6) {
            let filteredData = this.props.data.filter(column => {
                return column.title.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            }); 

        }   else if(this.state.radioSearch === "title" && this.state.selectBoxOption > 7) {
            let filteredData = this.props.data.filter(column => {
                return column.title.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            }); 

        }   else if(this.state.radioSearch === "title" && this.state.selectBoxOption > 8) {
            let filteredData = this.props.data.filter(column => {
                return column.title.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            });
        }   else if(this.state.radioSearch === "title" && this.state.selectBoxOption > 9) {
            let filteredData = this.props.data.filter(column => {
                return column.title.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            });    


         /*Check if the "genre" radio option & select box option is selected*/   

        }   else if(this.state.radioSearch === "genre" && this.state.selectBoxOption > 2) {
            let filteredData = this.props.data.filter(column => {
                return column.genre.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            });
            
            }   else if(this.state.radioSearch === "genre" && this.state.selectBoxOption > 3) {
            let filteredData = this.props.data.filter(column => {
                return column.genre.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            });   

            }   else if(this.state.radioSearch === "genre" && this.state.selectBoxOption > 4) {
            let filteredData = this.props.data.filter(column => {
                return column.genre.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            }); 

        }   else if(this.state.radioSearch === "genre" && this.state.selectBoxOption > 5) {
            let filteredData = this.props.data.filter(column => {
                return column.genre.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            }); 

        }   else if(this.state.radioSearch === "genre" && this.state.selectBoxOption > 6) {
            let filteredData = this.props.data.filter(column => {
                return column.genre.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            }); 

        }   else if(this.state.radioSearch === "genre" && this.state.selectBoxOption > 7) {
            let filteredData = this.props.data.filter(column => {
                return column.genre.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            }); 

        }   else if(this.state.radioSearch === "genre" && this.state.selectBoxOption > 8) {
            let filteredData = this.props.data.filter(column => {
                return column.genre.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            });
        }   else if(this.state.radioSearch === "genre" && this.state.selectBoxOption > 9) {
            let filteredData = this.props.data.filter(column => {
                return column.genre.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        });
            this.setState({
                filteredData: filteredData
            });    

        }

        console.log(this.state.selectBoxOption);
    }

    /*buttonDeleteHandler = (index) => {
        const example = [...this.state.example];
        example.splice(index, 1);
        this.setState({
            example: example
        });

        if(this.state.example.length === 0) {
            this.setState({
                appearanceExample: false
            })
        }

        const toDo = [...this.state.toDo];
        toDo.splice(index, 1);
        this.setState({
            toDo: toDo
        });
        
        if(this.state.toDo.length < 4) {
            this.setState({
                dailyLimit: ''
            })
        }
    }*/


    render() {
        
            /*let filteredData = this.props.data.filter(column => {
                return column.title.toLowerCase().indexOf(this.state.searchFieldInput.toLowerCase()) !== -1; 
        }); */
        console.log(this.state.selectBoxOption);
        console.log(this.state.filteredData);
        return(
            <React.Fragment>
                <div className="container-fluid">
                    <div className="container">
                        <form>
                            {/*Search field*/}  
                            <input
                                className={"Search" + (this.state.transformed === true ?
                                        ' transformed' : '')} 
                                type="text"
                                placeholder={(this.state.transformed === true ? 
                                '' : 'Type here')}
                                maxLength="20"
                                value={this.state.searchFieldInput} required
                                onChange={this.updatedSearch.bind(this)}
                            />

                            <button type="submit" onClick={event => this.submitHandler(event)}>
                                Search
                            </button>

                            {/*Radio buttons*/}
                            <label htmlFor="title">
                                <input type="radio" name="title" id="title" value="title" checked={this.state.radioSearch === "title"} 
                                onChange={this.searchHandler}/>
                                title
                            </label>
                            <label htmlFor="genre">
                                <input type="radio" name="genre" id="genre" value="genre" checked={this.state.radioSearch === "genre"} 
                                onChange={this.searchHandler}/>
                                genre
                            </label> 

                            {/*Select dropdown*/}
                            <label>
                              Ranking:
                                <select value={this.state.selectBoxOption} onChange={this.selectBoxHandler}>
                                    <option value="1">1</option>
                                    <option value="2">2</option>
                                    <option value="3">3</option>
                                    <option value="4">4</option>
                                    <option value="5">5</option>
                                    <option value="6">6</option>
                                    <option value="7">7</option>
                                    <option value="8">8</option>
                                    <option value="9">9</option>
                                    <option value="10">10</option>
                                </select>
                            </label>
                        </form>
                    </div>
                    <div className="container">
                        <div>
                            <div>
                                <div className="tableHeading">
                                    <div>No.</div>
                                    <div>Picture</div>
                                    <div>Release date</div>
                                    <div>Genre</div>
                                    <div>Rating</div>
                                </div>
                            </div>
                            <div>
                               {this.state.filteredData.map((row, index) => {
                                    /*const price = row.price_usd;
                                    const formattedPrice = parseFloat(price).toFixed(2);*/
                                    return (
                                        <TableRow 
                                            numeration={index + 1}
                                            key={row.id} 
                                            row={row}
                                            /*clicked={this.buttonDeleteHandler.bind(this, index)}*/
                                        />
                                    )
                                    })
                                }
                            </div>
                        </div>
                    </div>
                </div>     
            </React.Fragment>
        )
    }
}

export default Table;